name: Continuous Integration and Delivery

on:
  workflow_call:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-14, windows-2022]
        node-version: [22.x, 23.x]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Set up Node ${{ matrix.jvm-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm install
      - name: Test
        run: npm test
      - name: Check
        run: npx eslint .

  #  dry-delivery:
  #    needs: build
  #    runs-on: ubuntu-24.04
  #    steps:
  #      - name: Build dockerfile
  #        run: 'true' # TODO: Add steps to build the dockerfile
  #
  #  release:
  #    needs: dry-delivery
  #    if: github.ref_name == github.event.repository.default_branch
  #    permissions: # Not specified scopes are set to `none`!
  #      packages: write
  #      contents: write
  #      issues: write
  #      pull-requests: write
  #    concurrency:
  #      group: release-and-delivery-${{ github.event.number || github.ref }}
  #    runs-on: ubuntu-24.04
  #    outputs: # see release.config.js
  #      release-status: ${{ env.RELEASE_STATUS }}
  #      release_version: ${{ env.RELEASE_VERSION }}
  #    steps:
  #      - name: Checkout repository
  #        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
  #        with:
  #          submodules: recursive
  #          fetch-depth: 0
  #          fetch-tags: true
  #      - name: Find the version of Node from package.json
  #        id: node-version
  #        run: echo "version=$(jq -r .engines.node package.json)" >> $GITHUB_OUTPUT
  #      - name: Install Node
  #        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
  #        with:
  #          node-version: ${{ steps.node-version.outputs.version }}
  #      - name: Release
  #        run: |
  #          npm install
  #          npx semantic-release
  #        env:
  #          GITHUB_TOKEN: ${{ secrets.POSITION_PAL_BOT_TOKEN }}
  #
  #  publish-images:
  #    needs:
  #      - release
  #    # Trigger this job only if the semantic release bot has released a new version
  #    if: ${{ needs.release.outputs.release-status == 'released' }}
  #    runs-on: ubuntu-24.04
  #    permissions:
  #      contents: read
  #      packages: write
  #    steps:
  #      - name: Checkout repository
  #        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
  #      - name: Login to Docker Hub
  #        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
  #        with:
  #          username: ${{ secrets.DOCKERHUB_USERNAME }}
  #          password: ${{ secrets.DOCKERHUB_TOKEN }}
  #      - name: Set up Docker Buildx
  #        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3
  #      - name: Build and push
  #        uses: docker/build-push-action@b32b51a8eda65d6793cd0494a773d4f6bcef32dc # v6
  #        with:
  #          context: .
  #          file: ./Dockerfile
  #          push: true
  #          tags: |
  #            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
  #            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ needs.release.outputs.release_version }}
  #
  #  publish-doc:
  #    needs:
  #      - release
  #    # Trigger this job only if the semantic release bot has released a new version
  #    if: ${{ needs.release.outputs.release-status == 'released' }}
  #    runs-on: ubuntu-24.04
  #    steps:
  #      - name: Checkout repository
  #        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
  #        with:
  #          ref: ${{ needs.release.outputs.release_version }}
  #          fetch-tags: true
  #      - name: Generate doc
  #        run: 'true' # TODO: generate documentation
  #      - name: Publish on Github pages
  #        uses: JamesIves/github-pages-deploy-action@15de0f09300eea763baee31dff6c6184995c5f6a # v4
  #        with:
  #          folder: generated/docs/ # TODO: specify the folder where the documentation is generated

  success:
    needs:
      - build
      #- dry-delivery
      #- release
      #- publish-doc
      #- publish-images
    if:
      >- # run if at least one needed job has failed or all needed jobs have not been cancelled
      always() && (
        contains(join(needs.*.result, ','), 'failure')
        || !contains(join(needs.*.result, ','), 'cancelled')
      )
    runs-on: ubuntu-24.04
    steps:
      - name: Verify no failures occurred in needed jobs
        # if there are failures, false is executed and the job fails.
        run: ${{ !contains(join(needs.*.result, ','), 'failure') }}
